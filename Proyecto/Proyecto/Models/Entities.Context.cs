//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcademicDegree> AcademicDegree { get; set; }
        public virtual DbSet<Appointment> Appointment { get; set; }
        public virtual DbSet<Canton> Canton { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<PrivateMessage> PrivateMessage { get; set; }
        public virtual DbSet<Professor> Professor { get; set; }
        public virtual DbSet<ProfessorCourse> ProfessorCourse { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<PublicConsultation> PublicConsultation { get; set; }
        public virtual DbSet<SocialNetworksProfessor> SocialNetworksProfessor { get; set; }
        public virtual DbSet<SocialNetworksStudent> SocialNetworksStudent { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<StudentCourse> StudentCourse { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual int DeleteCourse(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourse", idParameter);
        }
    
        public virtual int DeleteProfessor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfessor", idParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", idParameter);
        }
    
        public virtual ObjectResult<GetCantonsByIdProvince_Result> GetCantonsByIdProvince(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCantonsByIdProvince_Result>("GetCantonsByIdProvince", idParameter);
        }
    
        public virtual ObjectResult<GetCourseById_Result> GetCourseById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseById_Result>("GetCourseById", idParameter);
        }
    
        public virtual ObjectResult<GetDistrictsByIdCanton_Result> GetDistrictsByIdCanton(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistrictsByIdCanton_Result>("GetDistrictsByIdCanton", idParameter);
        }
    
        public virtual ObjectResult<GetProfessorById_Result> GetProfessorById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfessorById_Result>("GetProfessorById", idParameter);
        }
    
        public virtual ObjectResult<GetProvinces_Result> GetProvinces()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProvinces_Result>("GetProvinces");
        }
    
        public virtual ObjectResult<GetStudentById_Result> GetStudentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentById_Result>("GetStudentById", idParameter);
        }
    
        public virtual int InsertUpdateCourse(Nullable<int> id, string initials, string name, Nullable<int> isActive, Nullable<int> credits, Nullable<int> cycle, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var initialsParameter = initials != null ?
                new ObjectParameter("Initials", initials) :
                new ObjectParameter("Initials", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("Credits", credits) :
                new ObjectParameter("Credits", typeof(int));
    
            var cycleParameter = cycle.HasValue ?
                new ObjectParameter("Cycle", cycle) :
                new ObjectParameter("Cycle", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCourse", idParameter, initialsParameter, nameParameter, isActiveParameter, creditsParameter, cycleParameter, actionParameter);
        }
    
        public virtual int InsertUpdateProfessor(Nullable<int> id, string username, string password, Nullable<int> isAdministrator, string status, string name, string lastName, string mail, string image, Nullable<int> provinceId, Nullable<int> cantonId, Nullable<int> districtId, Nullable<int> academicDegree, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdministratorParameter = isAdministrator.HasValue ?
                new ObjectParameter("IsAdministrator", isAdministrator) :
                new ObjectParameter("IsAdministrator", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cantonIdParameter = cantonId.HasValue ?
                new ObjectParameter("CantonId", cantonId) :
                new ObjectParameter("CantonId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var academicDegreeParameter = academicDegree.HasValue ?
                new ObjectParameter("AcademicDegree", academicDegree) :
                new ObjectParameter("AcademicDegree", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProfessor", idParameter, usernameParameter, passwordParameter, isAdministratorParameter, statusParameter, nameParameter, lastNameParameter, mailParameter, imageParameter, provinceIdParameter, cantonIdParameter, districtIdParameter, academicDegreeParameter, actionParameter);
        }
    
        public virtual int InsertUpdateStudent(Nullable<int> id, string username, string password, Nullable<int> isAdministrator, string status, string studentCard, string studentName, string lastName, Nullable<System.DateTime> birthday, string mail, string image, string registrationStatus, Nullable<int> provinceId, Nullable<int> cantonId, Nullable<int> districtId, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdministratorParameter = isAdministrator.HasValue ?
                new ObjectParameter("IsAdministrator", isAdministrator) :
                new ObjectParameter("IsAdministrator", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var studentCardParameter = studentCard != null ?
                new ObjectParameter("StudentCard", studentCard) :
                new ObjectParameter("StudentCard", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var registrationStatusParameter = registrationStatus != null ?
                new ObjectParameter("RegistrationStatus", registrationStatus) :
                new ObjectParameter("RegistrationStatus", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cantonIdParameter = cantonId.HasValue ?
                new ObjectParameter("CantonId", cantonId) :
                new ObjectParameter("CantonId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStudent", idParameter, usernameParameter, passwordParameter, isAdministratorParameter, statusParameter, studentCardParameter, studentNameParameter, lastNameParameter, birthdayParameter, mailParameter, imageParameter, registrationStatusParameter, provinceIdParameter, cantonIdParameter, districtIdParameter, actionParameter);
        }
    
        public virtual ObjectResult<SelectCourse_Result> SelectCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCourse_Result>("SelectCourse");
        }
    
        public virtual int SelectProfessor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProfessor");
        }
    
        public virtual ObjectResult<SelectStudent_Result> SelectStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStudent_Result>("SelectStudent");
        }
    
        public virtual ObjectResult<StudentApproval_Result> StudentApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentApproval_Result>("StudentApproval");
        }
    
        public virtual int UpdateStatusStudent(Nullable<int> id, string registrationStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var registrationStatusParameter = registrationStatus != null ?
                new ObjectParameter("RegistrationStatus", registrationStatus) :
                new ObjectParameter("RegistrationStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusStudent", idParameter, registrationStatusParameter);
        }
    
        public virtual ObjectResult<SelectStudent_Result> SPSelectStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStudent_Result>("SPSelectStudent");
        }
    
        public virtual ObjectResult<GetProvinces_Result> SPGetProvinces()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProvinces_Result>("SPGetProvinces");
        }
    
        public virtual ObjectResult<StudentApproval_Result> SPStudentApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentApproval_Result>("SPStudentApproval");
        }
    
        public virtual ObjectResult<SelectCourse_Result> SPSelectCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCourse_Result>("SPSelectCourse");
        }
    
        public virtual int SPDeleteCourse(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteCourse", idParameter);
        }
    
        public virtual ObjectResult<GetCourseById_Result> SPGetCourseById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseById_Result>("SPGetCourseById", idParameter);
        }
    
        public virtual int SPInsertUpdateCourse(Nullable<int> id, string initials, string name, Nullable<int> isActive, Nullable<int> credits, Nullable<int> cycle, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var initialsParameter = initials != null ?
                new ObjectParameter("Initials", initials) :
                new ObjectParameter("Initials", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("Credits", credits) :
                new ObjectParameter("Credits", typeof(int));
    
            var cycleParameter = cycle.HasValue ?
                new ObjectParameter("Cycle", cycle) :
                new ObjectParameter("Cycle", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertUpdateCourse", idParameter, initialsParameter, nameParameter, isActiveParameter, creditsParameter, cycleParameter, actionParameter);
        }
    
        public virtual int SPDeleteProfessor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteProfessor", idParameter);
        }
    
        public virtual ObjectResult<GetProfessorById_Result> SPGetProfessorById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfessorById_Result>("SPGetProfessorById", idParameter);
        }
    
        public virtual int SPInsertUpdateProfessor(Nullable<int> id, string username, string password, Nullable<int> isAdministrator, string status, string name, string lastName, string mail, string image, Nullable<int> provinceId, Nullable<int> cantonId, Nullable<int> districtId, Nullable<int> academicDegree, string action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdministratorParameter = isAdministrator.HasValue ?
                new ObjectParameter("IsAdministrator", isAdministrator) :
                new ObjectParameter("IsAdministrator", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cantonIdParameter = cantonId.HasValue ?
                new ObjectParameter("CantonId", cantonId) :
                new ObjectParameter("CantonId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var academicDegreeParameter = academicDegree.HasValue ?
                new ObjectParameter("AcademicDegree", academicDegree) :
                new ObjectParameter("AcademicDegree", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertUpdateProfessor", idParameter, usernameParameter, passwordParameter, isAdministratorParameter, statusParameter, nameParameter, lastNameParameter, mailParameter, imageParameter, provinceIdParameter, cantonIdParameter, districtIdParameter, academicDegreeParameter, actionParameter);
        }
    
        public virtual ObjectResult<SelectAcademicDegree_Result> SelectAcademicDegree()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAcademicDegree_Result>("SelectAcademicDegree");
        }
    
        public virtual ObjectResult<SelectAcademicDegree_Result> SPSelectAcademicDegree()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAcademicDegree_Result>("SPSelectAcademicDegree");
        }
    
        public virtual ObjectResult<SelectProfessor_Result> SPSelectProfessor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProfessor_Result>("SPSelectProfessor");
        }
    
        public virtual int TypeUserVerify(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TypeUserVerify", idParameter);
        }
    
        public virtual int UsersLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsersLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> SPTypeUserVerify(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPTypeUserVerify", idParameter);
        }
    
        public virtual ObjectResult<string> SPUsersLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPUsersLogin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SelectUsers_Result> SelectUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUsers_Result>("SelectUsers");
        }
    
        public virtual ObjectResult<SelectUsers_Result> SPSelectUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUsers_Result>("SPSelectUsers");
        }
    
        public virtual ObjectResult<ListStudent_Result> ListStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListStudent_Result>("ListStudent");
        }
    
        public virtual ObjectResult<ListStudent_Result> SPListStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListStudent_Result>("SPListStudent");
        }
    }
}
